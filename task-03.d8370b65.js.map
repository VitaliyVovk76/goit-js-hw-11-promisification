{"version":3,"sources":["js/task-03.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","Promise","resolve","reject","setTimeout","id","time","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":";AAMA,MAAMA,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,IAChBC,MAAAA,EAAQR,EAA0B,IAAK,KACtC,OAAA,IAAIS,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACUT,KAAKE,SAAW,IAGjCK,EAAQ,CAAEG,GAAIN,EAAYM,GAAIC,KAAMN,IAEtCG,EAAO,CAAEE,GAAIN,EAAYM,MACxBL,MAIDO,EAAa,EAAGF,GAAAA,EAAIC,KAAAA,MACxBE,QAAQC,mBAAmBJ,kBAAmBC,QAG1CI,EAAW,EAAGL,GAAAA,MAClBG,QAAQG,qCAAqCN,+BAa/CP,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,GAEhEZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,GAEhEZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,KAAMC,KAAKN,GAAYO,MAAMJ,GAE/DZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ","file":"task-03.d8370b65.js","sourceRoot":"../src","sourcesContent":["/**\n * Перепиши функцию makeTransaction() так, чтобы она не использовала\n * callback-функции onSuccess и onError, а принимала всего один\n * параметр transaction и возвращала промис.\n */\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      }\n      reject({ id: transaction.id });\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = ({ id }) => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"]}